给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

例如：
给定二叉树 [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回其自底向上的层次遍历为：

[
  [15,7],
  [9,20],
  [3]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 先把根节点入队列，如果队列不为空，就退出一个元素，再把left，right入队。
 可以声明一个二维List。
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        if(root == null )
            return result;
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        
        while(!queue.isEmpty()){
            List<Integer> every = new ArrayList<Integer>();
            int size = queue.size();
            for(int i=0;i<size;i++){
                TreeNode node = queue.poll();
                every.add(node.val);
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            result.add(every);
            
        }
        Collections.reverse(result);
        return result;
    }
}

Queue的使用：
Queue<TreeNode> queue = new LinkedList<TreeNode>();
queue.offer(value);
queue.add(value);
TreeNode node = queue.poll(); 退出一个元素

List使用：
 List<List<Integer>> result = new ArrayList();
 List<Integer> every = new ArrayList<Integer>();
 every.add(node.val);
 result.add(every);
 
 List的反转：
         Collections.reverse(result); //result是一个二维list，这样是对第一维反转。
